{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "RHFLyiSNuoptcKaloZLV9",
      "type": "rectangle",
      "x": 438.43914794921875,
      "y": 122.23849487304688,
      "width": 349,
      "height": 35,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 26016814,
      "version": 284,
      "versionNonce": 632845234,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "fPGC50XOYjkjuy9L5ZTKR"
        }
      ],
      "updated": 1655056815166,
      "link": null,
      "locked": false
    },
    {
      "id": "fPGC50XOYjkjuy9L5ZTKR",
      "type": "text",
      "x": 443.43914794921875,
      "y": 127.23849487304688,
      "width": 339,
      "height": 25,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 745103858,
      "version": 295,
      "versionNonce": 117397614,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1655056815166,
      "link": null,
      "locked": false,
      "text": "Storage and Retrieval",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 18,
      "containerId": "RHFLyiSNuoptcKaloZLV9",
      "originalText": "Storage and Retrieval"
    },
    {
      "id": "hMFUDNH9lIWnTpb1taW2Y",
      "type": "text",
      "x": 436.0283203125,
      "y": 185.56967163085938,
      "width": 685,
      "height": 20,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1525076018,
      "version": 150,
      "versionNonce": 599331310,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1655056817084,
      "link": null,
      "locked": false,
      "text": "Log structured storage engines and page-oriented engines such as B-trees.",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 16,
      "containerId": null,
      "originalText": "Log structured storage engines and page-oriented engines such as B-trees."
    },
    {
      "id": "1_PsAKPWw0nTQCwLQ1uEQ",
      "type": "text",
      "x": 435.36053466796875,
      "y": 231.93255615234375,
      "width": 905.5278871193922,
      "height": 184.70495605468747,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 80,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1091939762,
      "version": 1087,
      "versionNonce": 740037358,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1655084092340,
      "link": null,
      "locked": false,
      "text": "In order to efficiently find the vault of a particular key in the database, we need a different\ndata structure: an index. General idea behind them is to keep some additional metadata on the side,\nwhich acts as a signpost that helps you to locate the data you want. If you want to search the same\ndata in several different ways, you may need several different indexes on different parts of the data.\n\nAn index is an additional structure that is derived from the primary data. Many DBs allow you to add\nand remove indexes, and this doesn't affect the contents of the DB; it only affects the performance\nof the queries. Maintaining additional structures incurs overhead, especially on writes. This is an \nimportant trade-off in storage systems: well-chosen indexes speed up reads, but every index slows down\nwrites.",
      "fontSize": 15.155278445512824,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 181.70495605468747,
      "containerId": null,
      "originalText": "In order to efficiently find the vault of a particular key in the database, we need a different\ndata structure: an index. General idea behind them is to keep some additional metadata on the side,\nwhich acts as a signpost that helps you to locate the data you want. If you want to search the same\ndata in several different ways, you may need several different indexes on different parts of the data.\n\nAn index is an additional structure that is derived from the primary data. Many DBs allow you to add\nand remove indexes, and this doesn't affect the contents of the DB; it only affects the performance\nof the queries. Maintaining additional structures incurs overhead, especially on writes. This is an \nimportant trade-off in storage systems: well-chosen indexes speed up reads, but every index slows down\nwrites."
    },
    {
      "id": "iPdhlVtPP5cz5KDu0lA5B",
      "type": "text",
      "x": 429.46990966796875,
      "y": 441.27032470703125,
      "width": 901.40966796875,
      "height": 19.406020838939718,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 80,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 313121906,
      "version": 302,
      "versionNonce": 658672878,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1655084101188,
      "link": null,
      "locked": false,
      "text": "DB operators must carefully choose indexes, using the knowledge of the applications query patterns.",
      "fontSize": 15.524816671151777,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15.406020838939718,
      "containerId": null,
      "originalText": "DB operators must carefully choose indexes, using the knowledge of the applications query patterns."
    },
    {
      "id": "akNoKLXaUK1Kg3EtbSLsE",
      "type": "text",
      "x": 430.24212646484375,
      "y": 531.28955078125,
      "width": 877.9483642578125,
      "height": 199.3230182845085,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 80,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1505124338,
      "version": 959,
      "versionNonce": 456585710,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1655084190366,
      "link": null,
      "locked": false,
      "text": "An append-only log seems wasteful, but turns out good for several reasons:\n\n* Appending and segment merging are sequential write operations, which are generally faster than\nrandom writes, especially on magnetic spinning-disk HDs. They are to some extend also preferable\non flash-based SSDs.\n\n* Concurrency and crash recovery are much simpler if segment files are append-only or immutable. \nFor example you don't have to worry about a case where a crash occurs while a vale was being updated,\nleaving a file containing part of the old and part of the new value spliced together.\n\n* Merging old segments avoids the problem of data files getting fragmented over time.",
      "fontSize": 14.833340895591329,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 196.3230182845085,
      "containerId": null,
      "originalText": "An append-only log seems wasteful, but turns out good for several reasons:\n\n* Appending and segment merging are sequential write operations, which are generally faster than\nrandom writes, especially on magnetic spinning-disk HDs. They are to some extend also preferable\non flash-based SSDs.\n\n* Concurrency and crash recovery are much simpler if segment files are append-only or immutable. \nFor example you don't have to worry about a case where a crash occurs while a vale was being updated,\nleaving a file containing part of the old and part of the new value spliced together.\n\n* Merging old segments avoids the problem of data files getting fragmented over time."
    },
    {
      "id": "twRkPPq73D3wrqWujlPA9",
      "type": "text",
      "x": 426.7786560058594,
      "y": 753.1723022460938,
      "width": 828.83349609375,
      "height": 90.25075846354164,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 80,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1356419054,
      "version": 509,
      "versionNonce": 1988602610,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1655084188366,
      "link": null,
      "locked": false,
      "text": "Hash table index has limitations:\n* The hash table must fit in memory. So if you have a very large number of keys, you are\nout of luck. You could in principle, maintain a hash map on disk, but it is difficult to make\nan on-disk hash map perform well. It requires a lot of random access I/O,it is expensive to grow\nwhen it becomes full.",
      "fontSize": 14.734817708333331,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 86.25075846354164,
      "containerId": null,
      "originalText": "Hash table index has limitations:\n* The hash table must fit in memory. So if you have a very large number of keys, you are\nout of luck. You could in principle, maintain a hash map on disk, but it is difficult to make\nan on-disk hash map perform well. It requires a lot of random access I/O,it is expensive to grow\nwhen it becomes full."
    },
    {
      "type": "rectangle",
      "version": 441,
      "versionNonce": 1005151858,
      "isDeleted": false,
      "id": "GnByUDww4N6jQh1-oHxAv",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 80,
      "angle": 0,
      "x": 433.8238525390625,
      "y": 484.99749755859375,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 175,
      "height": 35,
      "seed": 2006877230,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [
        {
          "id": "FCh0f4F2hy2lWk8r-06Sr",
          "type": "text"
        },
        {
          "type": "text",
          "id": "FCh0f4F2hy2lWk8r-06Sr"
        }
      ],
      "updated": 1655084208232,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 463,
      "versionNonce": 1587278254,
      "isDeleted": false,
      "id": "FCh0f4F2hy2lWk8r-06Sr",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 80,
      "angle": 0,
      "x": 438.8238525390625,
      "y": 489.99749755859375,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 165,
      "height": 25,
      "seed": 983408050,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1655084208232,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Hash Indexes",
      "baseline": 18,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "GnByUDww4N6jQh1-oHxAv",
      "originalText": "Hash Indexes"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}