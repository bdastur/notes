<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 934.1097657815017 741.1845658365885" width="1868.2195315630033" height="1482.369131673177">
  <!-- svg-source:excalidraw -->
  
  <defs>
    <style>
      @font-face {
        font-family: "Virgil";
        src: url("https://excalidraw.com/Virgil.woff2");
      }
      @font-face {
        font-family: "Cascadia";
        src: url("https://excalidraw.com/Cascadia.woff2");
      }
    </style>
  </defs>
  <rect x="0" y="0" width="934.1097657815017" height="741.1845658365885" fill="#ffffff"></rect><g stroke-linecap="round" transform="translate(21.660491943359375 10) rotate(0 174.5 17.5)"><path d="M1.09 -0.01 C124.79 0.89, 252.14 1.73, 349.93 1.17 M-0.2 -0.13 C139.22 1.23, 278.42 0.94, 348.44 -0.29 M347.49 1.85 C350.78 7.75, 347.4 16.04, 349.28 35.35 M349.61 0.54 C348.45 8.66, 348.24 16.18, 349.23 35.41 M350.1 35.83 C242.73 33.72, 136.7 33.35, -0.16 34.19 M348.69 35.01 C226.05 37.52, 103.77 37.37, -0.54 34.6 M-1.35 33.8 C-0.22 27.39, -1.2 15.09, 1.21 -0.97 M-0.49 35.1 C-0.04 23.64, -0.03 12.31, 0.42 -0.26" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(26.660491943359375 15) rotate(0 169.5 12.5)"><text x="169.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">Storage and Retrieval</text></g><g transform="translate(19.249664306640625 73.3311767578125) rotate(0 342.5 10)"><text x="0" y="16" font-family="Cascadia, Segoe UI Emoji" font-size="16px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">Log structured storage engines and page-oriented engines such as B-trees.</text></g><g stroke-opacity="0.8" fill-opacity="0.8" transform="translate(18.581878662109375 119.69406127929688) rotate(0 452.76394355969614 92.35247802734375)"><text x="0" y="15.470495605468749" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">In order to efficiently find the vault of a particular key in the database, we need a different</text><text x="0" y="33.9409912109375" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">data structure: an index. General idea behind them is to keep some additional metadata on the side,</text><text x="0" y="52.411486816406246" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">which acts as a signpost that helps you to locate the data you want. If you want to search the same</text><text x="0" y="70.881982421875" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">data in several different ways, you may need several different indexes on different parts of the data.</text><text x="0" y="89.35247802734375" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr"></text><text x="0" y="107.82297363281249" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">An index is an additional structure that is derived from the primary data. Many DBs allow you to add</text><text x="0" y="126.29346923828123" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">and remove indexes, and this doesn't affect the contents of the DB; it only affects the performance</text><text x="0" y="144.76396484375" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">of the queries. Maintaining additional structures incurs overhead, especially on writes. This is an </text><text x="0" y="163.23446044921874" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">important trade-off in storage systems: well-chosen indexes speed up reads, but every index slows down</text><text x="0" y="181.7049560546875" font-family="Cascadia, Segoe UI Emoji" font-size="15.155278445512824px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">writes.</text></g><g stroke-opacity="0.8" fill-opacity="0.8" transform="translate(12.691253662109375 329.0318298339844) rotate(0 450.704833984375 9.703010419469848)"><text x="0" y="15.406020838939718" font-family="Cascadia, Segoe UI Emoji" font-size="15.524816671151777px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">DB operators must carefully choose indexes, using the knowledge of the applications query patterns.</text></g><g stroke-opacity="0.8" fill-opacity="0.8" transform="translate(13.463470458984375 419.0510559082031) rotate(0 438.97418212890625 99.66150914225426)"><text x="0" y="15.120274389500771" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">An append-only log seems wasteful, but turns out good for several reasons:</text><text x="0" y="33.24054877900154" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr"></text><text x="0" y="51.360823168502314" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">* Appending and segment merging are sequential write operations, which are generally faster than</text><text x="0" y="69.48109755800309" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">random writes, especially on magnetic spinning-disk HDs. They are to some extend also preferable</text><text x="0" y="87.60137194750385" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">on flash-based SSDs.</text><text x="0" y="105.72164633700463" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr"></text><text x="0" y="123.8419207265054" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">* Concurrency and crash recovery are much simpler if segment files are append-only or immutable. </text><text x="0" y="141.96219511600617" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">For example you don't have to worry about a case where a crash occurs while a vale was being updated,</text><text x="0" y="160.08246950550694" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">leaving a file containing part of the old and part of the new value spliced together.</text><text x="0" y="178.2027438950077" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr"></text><text x="0" y="196.3230182845085" font-family="Cascadia, Segoe UI Emoji" font-size="14.833340895591329px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">* Merging old segments avoids the problem of data files getting fragmented over time.</text></g><g stroke-opacity="0.8" fill-opacity="0.8" transform="translate(10 640.9338073730469) rotate(0 414.416748046875 45.12537923177081)"><text x="0" y="14.05015169270833" font-family="Cascadia, Segoe UI Emoji" font-size="14.734817708333331px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">Hash table index has limitations:</text><text x="0" y="32.10030338541666" font-family="Cascadia, Segoe UI Emoji" font-size="14.734817708333331px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">* The hash table must fit in memory. So if you have a very large number of keys, you are</text><text x="0" y="50.15045507812499" font-family="Cascadia, Segoe UI Emoji" font-size="14.734817708333331px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">out of luck. You could in principle, maintain a hash map on disk, but it is difficult to make</text><text x="0" y="68.20060677083332" font-family="Cascadia, Segoe UI Emoji" font-size="14.734817708333331px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">an on-disk hash map perform well. It requires a lot of random access I/O,it is expensive to grow</text><text x="0" y="86.25075846354164" font-family="Cascadia, Segoe UI Emoji" font-size="14.734817708333331px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">when it becomes full.</text></g><g stroke-opacity="0.8" fill-opacity="0.8" stroke-linecap="round" transform="translate(17.045196533203125 372.7590026855469) rotate(0 87.5 17.5)"><path d="M-0.67 1.46 C52.83 1.65, 100.36 1.93, 175 0.35 M0.32 0.39 C63.73 -1.98, 128.67 -2.24, 175.53 -0.37 M173.71 -1.89 C175.15 7.52, 174.72 15.82, 174.22 36.43 M175.52 -0.95 C174.76 10.24, 175.52 20.99, 174.09 35.93 M173.63 36.21 C135.18 32.01, 96.49 34.72, 1.84 35.65 M175.99 35.13 C136.07 37.26, 95.97 37.01, 0.45 35.36 M-1.92 36.7 C2.14 22.91, 1.94 6.46, 0.87 -1.62 M-0.04 34.34 C-0.12 25.4, 0.99 15.37, 0.26 -1" stroke="#000000" stroke-width="1" fill="none"></path></g><g stroke-opacity="0.8" fill-opacity="0.8" transform="translate(22.045196533203125 377.7590026855469) rotate(0 82.5 12.5)"><text x="82.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">Hash Indexes</text></g></svg>